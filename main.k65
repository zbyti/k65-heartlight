//-----------------------------------------------------------------------------

[
  STRONG_WALL = 0x1E
  WEAK_WALL   = 0x0A
  STONE       = 0x0C
  HEART       = 0x10
  HERO        = 0x18
  EXIT        = 0x1C
  BOMB        = 0x12
  GRASS       = 0x0E
]

[
  LV_SIZE        = 0xF0
  LV_SIZE_PACKED = 0x78
  LV_START       = 1
  SCREEN_1       = 0x0200  //0x0200 bytes
  SCREEN_2       = 0x0400  //0x0200 bytes
  LEVEL          = 0x0600  //0x00F0 bytes
  GFX_GAME       = 0x1C00  //0x0400 bytes
  LEVELS         = 0x2000
]

//-----------------------------------------------------------------------------

var count_1=0, count_2, count_depack, tmp_a, tmp_b, p_tmp[2], w_tmp[2]

var screen_1=[SCREEN_1], screen_2=[SCREEN_2], level=[LEVEL]

//-----------------------------------------------------------------------------
// initialize system
//-----------------------------------------------------------------------------

inline set_colors { COLPF0=a=4 COLPF1=a=6 COLPF2=a=0xE COLPF3=a=0xA COLBK=a=0 }

inline init {
  pause

  i+ d- NMIEN=DMACTL=PORTA=GRACTL=AUDCTL=a=0 SKCTL=a=3 PORTB=a=0xFE s=x=0xFF

  CHBASE=a=&>gfx_game
  DLISTL=a=&<dl DLISTH=a=&>dl
  NMIADL=a=&<nmi NMIADH=a=&>nmi

  set_colors

  DMACTL=a=0b00100010 NMIEN=a=0x40
}

//-----------------------------------------------------------------------------
// depack level
//-----------------------------------------------------------------------------

func depack_lv {
  factor1=x factor2=a=[LV_SIZE_PACKED] mul8x8

  a=&>levels c- a+prodH .CURRENT_LV+2=a
  a=&<levels c- a+prodL .CURRENT_LV+1=a c+?{ .CURRENT_LV+2++ } 

  count_depack=x=[LV_SIZE] y=[LV_SIZE_PACKED]
  {
    .CURRENT_LV: a=levels,y
    
    a!! a&0b00001111 x=a a=trans_tile,x
    count_depack-- x=count_depack level,x=a
    
    a?? a&0b11110000 a>> a>> a>> a>> x=a a=trans_tile,x
    count_depack-- x=count_depack level,x=a 

    y--
  } !=
}

//-----------------------------------------------------------------------------
// draw procedures
//-----------------------------------------------------------------------------

func draw_lv {
  //reset 2x2 brush SMC vector
  .LT+1=.LD+1=a=&<screen_1+224 .RT+1=.RD+1=a=&<screen_1+225
  .LT+2=.RT+2=a=&>screen_1+0x100 .LD+2=.RD+2=a=&>screen_2+0x100
  
  y=[LV_SIZE] {
    a=level,y

    x=a .LT: screen_1=x x++ .RT: screen_1+1=x //2x2 brush LT - left top,  RT - right top
    a|0x20 
    x=a .LD: screen_2=x x++ .RD: screen_2+1=x //2x2 brush LD - left down, RF - right down

    //move 2x2 brush to left from bottom right corner of the screen
    c+ a=.LT+1 a-2 .LT+1=.LD+1=a c-?{ .LT+2-- .RT+2-- .LD+2-- .RD+2-- } x=a x++ .RT+1=.RD+1=x

    y-- y?0xFF
  } !=
}

func slideshow {
  count_1=a=[LV_START]
  {
    x=count_1 x?levels =={ goto slideshow } count_1++
    depack_lv draw_lv wait4s
  } always  
}

//-----------------------------------------------------------------------------
// VBLANK interrupt
//-----------------------------------------------------------------------------
inline vbi {

}

//-----------------------------------------------------------------------------
// NMI handler
//-----------------------------------------------------------------------------
naked nmi {
  RTCLOK++

  phr vbi plr return_i
}

//-----------------------------------------------------------------------------

main {
  init

  //x=0 depack_lv draw_lv

  slideshow

  {} always

}

//-----------------------------------------------------------------------------

data levels {
  address [LEVELS]
  binary "levels/data.bin"
}
